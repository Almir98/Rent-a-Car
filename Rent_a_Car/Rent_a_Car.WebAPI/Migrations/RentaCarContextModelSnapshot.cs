// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RentACar.WebAPI.Database;

namespace RentACar.WebAPI.Migrations
{
    [DbContext(typeof(RentaCarContext))]
    partial class RentaCarContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RentACar.WebAPI.Database.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BookingID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("CommentStatus")
                        .HasColumnType("bit");

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("RatingStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("VehicleId")
                        .HasColumnName("VehicleID")
                        .HasColumnType("int");

                    b.HasKey("BookingId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("RentACar.WebAPI.Database.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BranchID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(70)")
                        .HasMaxLength(70);

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("CityId")
                        .HasColumnName("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CloseTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("OpenTime")
                        .HasColumnType("datetime");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("BranchId");

                    b.HasIndex("CityId");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("RentACar.WebAPI.Database.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CityID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CityId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("RentACar.WebAPI.Database.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CommentID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfComment")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("VehicleId")
                        .HasColumnName("VehicleID")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("RentACar.WebAPI.Database.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CustomerID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnName("CityID")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerTypeId")
                        .HasColumnName("CustomerTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CustomerId");

                    b.HasIndex("CityId");

                    b.HasIndex("CustomerTypeId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("RentACar.WebAPI.Database.CustomerType", b =>
                {
                    b.Property<int>("CustomerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CustomerTypeID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CustomerTypeId");

                    b.ToTable("CustomerType");
                });

            modelBuilder.Entity("RentACar.WebAPI.Database.FuelType", b =>
                {
                    b.Property<int>("FuelTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FuelTypeID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FuelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("FuelTypeId");

                    b.ToTable("FuelType");
                });

            modelBuilder.Entity("RentACar.WebAPI.Database.Manufacturer", b =>
                {
                    b.Property<int>("ManufacturerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ManufacturerID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ManufacturerId");

                    b.ToTable("Manufacturer");
                });

            modelBuilder.Entity("RentACar.WebAPI.Database.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RatingID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("RatingValue")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnName("VehicleID")
                        .HasColumnType("int");

                    b.HasKey("RatingId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("RentACar.WebAPI.Database.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VehicleID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnName("BranchID")
                        .HasColumnType("int");

                    b.Property<double?>("DailyPrice")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("FuelTypeId")
                        .HasColumnName("FuelTypeID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("ManufacturerDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Mileage")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Transmission")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("VehicleModelId")
                        .HasColumnName("VehicleModelID")
                        .HasColumnType("int");

                    b.Property<int>("VehicleNumber")
                        .HasColumnType("int");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnName("VehicleTypeID")
                        .HasColumnType("int");

                    b.HasKey("VehicleId");

                    b.HasIndex("BranchId");

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("VehicleModelId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("RentACar.WebAPI.Database.VehicleModel", b =>
                {
                    b.Property<int>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ModelID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ManufacturerId")
                        .HasColumnName("ManufacturerID")
                        .HasColumnType("int");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ModelId")
                        .HasName("PK_ModelID");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("VehicleModel");
                });

            modelBuilder.Entity("RentACar.WebAPI.Database.VehicleType", b =>
                {
                    b.Property<int>("VehcileTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VehcileTypeID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("VehcileTypeId")
                        .HasName("PK_VehicleTypeID");

                    b.ToTable("VehicleType");
                });

            modelBuilder.Entity("RentACar.WebAPI.Database.Booking", b =>
                {
                    b.HasOne("RentACar.WebAPI.Database.Customer", "Customer")
                        .WithMany("Booking")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Booking_CustomerID")
                        .IsRequired();

                    b.HasOne("RentACar.WebAPI.Database.Vehicle", "Vehicle")
                        .WithMany("Booking")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("FK_Booking_VehicleID")
                        .IsRequired();
                });

            modelBuilder.Entity("RentACar.WebAPI.Database.Branch", b =>
                {
                    b.HasOne("RentACar.WebAPI.Database.City", "City")
                        .WithMany("Branch")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Branch_CityID")
                        .IsRequired();
                });

            modelBuilder.Entity("RentACar.WebAPI.Database.Comment", b =>
                {
                    b.HasOne("RentACar.WebAPI.Database.Customer", "Customer")
                        .WithMany("Comment")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Comment_CustomerID")
                        .IsRequired();

                    b.HasOne("RentACar.WebAPI.Database.Vehicle", "Vehicle")
                        .WithMany("Comment")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("FK_Comment_VehicleID")
                        .IsRequired();
                });

            modelBuilder.Entity("RentACar.WebAPI.Database.Customer", b =>
                {
                    b.HasOne("RentACar.WebAPI.Database.City", "City")
                        .WithMany("Customer")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Customer_CityID")
                        .IsRequired();

                    b.HasOne("RentACar.WebAPI.Database.CustomerType", "CustomerType")
                        .WithMany("Customer")
                        .HasForeignKey("CustomerTypeId")
                        .HasConstraintName("FK_Customer_CustomerTypeID");
                });

            modelBuilder.Entity("RentACar.WebAPI.Database.Rating", b =>
                {
                    b.HasOne("RentACar.WebAPI.Database.Customer", "Customer")
                        .WithMany("Rating")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Rating_CustomerID")
                        .IsRequired();

                    b.HasOne("RentACar.WebAPI.Database.Vehicle", "Vehicle")
                        .WithMany("Rating")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("FK_Rating_VehicleID")
                        .IsRequired();
                });

            modelBuilder.Entity("RentACar.WebAPI.Database.Vehicle", b =>
                {
                    b.HasOne("RentACar.WebAPI.Database.Branch", "Branch")
                        .WithMany("Vehicle")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_Vehicle_BranchID")
                        .IsRequired();

                    b.HasOne("RentACar.WebAPI.Database.FuelType", "FuelType")
                        .WithMany("Vehicle")
                        .HasForeignKey("FuelTypeId")
                        .HasConstraintName("FK_Vehicle_FuelTypeID")
                        .IsRequired();

                    b.HasOne("RentACar.WebAPI.Database.VehicleModel", "VehicleModel")
                        .WithMany("Vehicle")
                        .HasForeignKey("VehicleModelId")
                        .HasConstraintName("FK_Vehicle_ModelID")
                        .IsRequired();

                    b.HasOne("RentACar.WebAPI.Database.VehicleType", "VehicleType")
                        .WithMany("Vehicle")
                        .HasForeignKey("VehicleTypeId")
                        .HasConstraintName("FK_Vehicle_VehicleTypeID")
                        .IsRequired();
                });

            modelBuilder.Entity("RentACar.WebAPI.Database.VehicleModel", b =>
                {
                    b.HasOne("RentACar.WebAPI.Database.Manufacturer", "Manufacturer")
                        .WithMany("VehicleModel")
                        .HasForeignKey("ManufacturerId")
                        .HasConstraintName("FK_Model_ManufacturerID")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
